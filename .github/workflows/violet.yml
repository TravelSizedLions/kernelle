name: 🎨 Violet Code Quality Analysis

on:
  pull_request:
  push:
    branches: [ dev, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  violet-analysis:
    name: 🎨 Code Complexity & Quality Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch full history for better analysis
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: violet-${{ hashFiles('**/Cargo.lock') }}
          cache-on-failure: true

      - name: Build Violet
        run: |
          echo "🎨 Building Violet - Code Complexity Artisan..."
          cargo build --release --bin violet

      - name: Run Violet Analysis on Rust Code
        run: |
          echo "🎨 Analyzing Rust codebase with Violet..."
          find . -name "*.rs" -not -path "./target/*" -not -path "./.cargo/*" | head -10 | while read file; do
            echo "Analyzing: $file"
            ./target/release/violet "$file" || echo "Analysis completed for $file"
          done

      - name: Run Violet Analysis on JavaScript/TypeScript
        run: |
          echo "🎨 Analyzing JavaScript/TypeScript files..."
          find . \( -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) \
            -not -path "./node_modules/*" \
            -not -path "./target/*" \
            -not -path "./dist/*" \
            -not -path "./build/*" | head -10 | while read file; do
            echo "Analyzing: $file"
            ./target/release/violet "$file" || echo "Analysis completed for $file"
          done

      - name: Run Violet Analysis on Python Files
        run: |
          echo "🎨 Analyzing Python files..."
          find . -name "*.py" \
            -not -path "./venv/*" \
            -not -path "./.venv/*" \
            -not -path "./target/*" | head -10 | while read file; do
            echo "Analyzing: $file"
            ./target/release/violet "$file" || echo "Analysis completed for $file"
          done

      - name: Run Comprehensive Analysis on Key Directories
        run: |
          echo "🎨 Running comprehensive Violet analysis..."
          
          # Analyze the main source directories
          for dir in src crates; do
            if [ -d "$dir" ]; then
              echo "📂 Analyzing directory: $dir"
              ./target/release/violet "$dir" --format json > "violet-analysis-$dir.json" || true
              
              # Show summary
              echo "📊 Summary for $dir:"
              if [ -f "violet-analysis-$dir.json" ]; then
                # Parse JSON to show violation count
                violations=$(cat "violet-analysis-$dir.json" | grep -o '"rule"' | wc -l || echo "0")
                echo "Total violations found: $violations"
              else
                echo "✨ No violations found! Code is beautiful."
              fi
            fi
          done

      - name: Check for Critical Violations
        run: |
          echo "🔍 Checking for critical code quality violations..."
          
          # Run Violet with strict settings and capture exit code
          if ./target/release/violet . --errors-only 2>&1 | tee violet-errors.log; then
            echo "✅ No critical violations found!"
          else
            echo "❌ Critical code quality issues detected!"
            echo "📋 Violation Summary:"
            cat violet-errors.log
            
            # Don't fail the build, but make it visible
            echo "::warning::Violet detected code quality issues. Please review and address them."
          fi

      - name: Upload Violet Analysis Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: violet-analysis-results
          path: |
            violet-analysis-*.json
            violet-errors.log
          retention-days: 30

      - name: Comment PR with Violet Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let violationCount = 0;
            let summary = "🎨 **Violet Code Quality Analysis Results**\n\n";
            
            // Try to read error log
            try {
              if (fs.existsSync('violet-errors.log')) {
                const errors = fs.readFileSync('violet-errors.log', 'utf8');
                if (errors.trim()) {
                  const lines = errors.split('\n').filter(line => line.includes('violation') || line.includes('error'));
                  violationCount = lines.length;
                  
                  if (violationCount > 0) {
                    summary += `❌ **${violationCount} code quality issues detected**\n\n`;
                    summary += "### Issues Found:\n";
                    lines.slice(0, 10).forEach(line => {
                      summary += `- ${line.trim()}\n`;
                    });
                    if (lines.length > 10) {
                      summary += `- ... and ${lines.length - 10} more issues\n`;
                    }
                  }
                }
              }
            } catch (e) {
              console.log('Could not read violet results:', e);
            }
            
            if (violationCount === 0) {
              summary += "✨ **Excellent!** No code quality violations detected.\n";
              summary += "\nYour code is beautifully crafted! 🎭\n";
            } else {
              summary += "\n💡 **Tips:**\n";
              summary += "- Review the detected issues above\n";
              summary += "- Consider refactoring complex functions\n"; 
              summary += "- Remove redundant 'no-duh' comments\n";
              summary += "- Use `// violet-ignore <rule>` for false positives\n";
            }
            
            summary += "\n---\n";
            summary += "*Analysis powered by Violet - Every line of code should be a masterpiece* 🎨";
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            }); 