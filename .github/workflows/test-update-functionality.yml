name: test-update-functionality

on:
  push:
    branches: [ dev, kernelle/update ]
  pull_request:
    branches: [ dev ]

jobs:
  test-update-basic:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[validated]') && !contains(github.event.head_commit.body, '[validated]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Test Update Functionality
      run: .github/test/update-functionality.sh

  test-update-cross-platform:
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[validated]') && !contains(github.event.head_commit.body, '[validated]')"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        # Note: Windows support would need additional work for the shell scripts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Test Update Cross-Platform
      run: .github/test/update-functionality.sh

  test-update-edge-cases:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[validated]') && !contains(github.event.head_commit.body, '[validated]')"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Test Update with Simulated Failures
      run: |
        # Test update when GitHub API is unreachable
        # This could be done by temporarily blocking GitHub API access
        echo "üîß Testing update failure scenarios..."
        
        # Install kernelle first
        ./scripts/install.sh --non-interactive
        
        # Test with invalid network (simulated)
        # This would require more sophisticated setup
        echo "‚è© Advanced failure testing requires additional infrastructure"
