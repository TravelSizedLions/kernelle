---
description: Historian CRUD operations for knowledge management
globs:
alwaysApply: true
---
# Historian CRUD Operations

This document defines the core Create, Read, Update, and Delete operations for the historian knowledge management system.

## Create Operations

### Adding New Insights
```bash
.cursor/tools/historian/add-insight.sh <topic> <name> "<overview>" "<detailed_content>"
```

**Parameters:**
- `topic` - The topic category (flat structure)
- `name` - Descriptive name for the insight
- `overview` - One-sentence summary of the key insight
- `detailed_content` - 1-2 paragraphs of actionable details

**Example:**
```bash
historian add debugging react-hooks-deps "Always check dependency arrays first" "When debugging React hooks, the most common issue is missing or incorrect dependencies in useEffect, useMemo, or useCallback arrays..."
```

### Linking Insights Across Topics
```bash
.cursor/tools/historian/link-insight.sh <src_topic> <src_name> <tgt_topic> [tgt_name]
```

**Purpose:** Connect related insights across the flat topic structure

**Example:**
```bash
historian link team-knowledge sarah-frontend debugging sarah-debugging-help
```

## Read Operations

### Searching for Insights
```bash
.cursor/tools/historian/search-insights.sh <query> [topic] [--case-sensitive] [--overview-only]
```

**Use Cases:**
- Find relevant knowledge before starting complex tasks
- Query knowledge base when stuck
- Discover related patterns and solutions

### Retrieving Specific Insights
```bash
.cursor/tools/historian/get-insight.sh <topic> <name> [--overview]
```

**Use Cases:**
- Get detailed information about a known insight
- Quick overview check with `--overview` flag

### Browsing Available Knowledge
```bash
.cursor/tools/historian/list-insights.sh [topic] [--verbose]
.cursor/tools/historian/list-topics.sh
```

**Use Cases:**
- Explore available knowledge areas
- Understand the scope of stored insights

## Update Operations

### Modifying Existing Insights
```bash
.cursor/tools/historian/update-insight.sh <topic> <name> [--overview "<new_overview>"] [--details "<new_details>"]
```

**When to Update:**
- Discover improvements to existing patterns
- Add new context to previous solutions
- Refine understanding based on new experience

## Delete Operations

### Removing Outdated Insights
```bash
.cursor/tools/historian/delete-insight.sh <topic> <name> [--force]
```

**When to Delete:**
- Insights become obsolete due to tool/process changes
- Duplicate insights that have been consolidated
- Incorrect information that could mislead

## Quality Guidelines

### Insight Criteria
- **Reusable** - likely to apply to future situations
- **Non-obvious** - not basic knowledge found in documentation
- **Contextual** - specific to this codebase/workflow/domain
- **Actionable** - provide clear guidance for future use
- **Single-purpose** - focused on one specific point or pattern

### Content Standards
- **Keep insights focused** - like functions, good insights do one thing well
- **Details section** should be no more than 1-2 paragraphs
- **Separate concerns** - if covering multiple unrelated points, create separate insights
- **Clear overview** - the summary should capture the core insight in one sentence

## Topic Organization

### Flat Structure with Specific Subjects
The historian system uses `topic/*.insight.md` where topics are **specific subjects** rather than broad categories. This enables precise, targeted searches using standard tools like `grep`, `cat`, and `sed`.

### Design Philosophy
- **Topics are specific subjects** - not broad categories
- **One topic per distinct subject** - repository, person, tool, technology, etc.
- **Link related insights** across topics using the linking system
- **Avoid hierarchical nesting** - keep everything at one level for searchability

### Example Topic Structure

#### Repository-Specific Topics
- `frontend-jfe` - insights about the frontend-jfe repository
- `backend-api` - insights about the backend API service
- `bentley` - insights about this specific repository

#### Team Member Topics  
- `jeff-hilton` - expertise areas, preferred approaches, who to ask for help
- `john-lookandfeel` - insights about John's expertise areas
- `sarah-frontend` - frontend expertise and debugging approaches

#### Tool-Specific Topics
- `cursor-mcp` - Cursor's MCP integration patterns and troubleshooting
- `gitlab-api` - GitLab API usage patterns and authentication
- `sentinel-tool` - Sentinel code complexity analysis usage and configuration

#### Technology/Pattern Topics
- `react-hooks` - React hooks debugging patterns and best practices
- `bash-scripting` - bash scripting patterns used in this project
- `merge-review-workflow` - MR review process insights and optimizations

### Anti-Pattern: Broad Categories
❌ **Don't do this:**
- `team-knowledge/jeff-mr-workflows.insight.md`
- `repository-knowledge/frontend-jfe-quirks.insight.md`  
- `tool-knowledge/cursor-mcp-endpoints.insight.md`

✅ **Do this instead:**
- `jeff-hilton/mr-workflow-expertise.insight.md`
- `frontend-jfe/architectural-quirks.insight.md`
- `cursor-mcp/endpoint-configuration.insight.md`
