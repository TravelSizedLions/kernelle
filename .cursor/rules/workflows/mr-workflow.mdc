---
description: 
globs: 
alwaysApply: true
---
# MR Workflow Rule

This rule defines a systematic approach for conducting merge request reviews using Bentley's MR toolset. The toolset provides a structured, offline-first workflow that ensures thorough review coverage while maintaining efficiency.

## Philosophy

This workflow implements a queue-based approach to MR reviews, treating each discussion thread as a discrete work item. Key principles:

- **Offline-first**: All review context is fetched once and stored locally, enabling fast navigation without repeated API calls
- **Queue-based processing**: Threads are processed in order, ensuring systematic coverage
- **Session management**: Each MR review maintains isolated state until completion
- **Comprehensive context**: Tools provide full diff context, timestamps, and thread relationships
- **Self-Effective**: Aside from the need to ascertain the gitlab project and MR ID to initialize the review, all parts of the review can be handled with the scripts provided.

## Tool Locations

All tools are located under `.cursor/tools/merge-review/`:

- `start.sh` - Initialize review session, fetch all MR data
- `status.sh` - Display current MR and queue status
- `peek-thread.sh` - View next thread without removing from queue  
- `pop-thread.sh` - Remove thread from queue (with optional --unresolved flag)
- `comment.sh` - Add comments to threads or MR (with --new flag)
- `resolve.sh` - Mark threads as resolved
- `finish.sh` - Complete session and cleanup
- `refresh.sh` - Cleans up an existing session, then downloads it fresh again. (essentially just runs finish.sh, the start.sh). Don't use unless instructed.

Common utilities under `.cursor/tools/common/`:
- `time.sh` - UTC to local timezone conversion
- `logging.sh` - Consistent output formatting
- `setup-params.sh` - Parameter parsing and validation
- `get-session.sh` - Session data retrieval

Git utilities live under `.cursor/tools/git/`:
- `commit.sh` - Creates formal, structured RRCs (Review Response Commits)

Style Enforcement lives under `.cursor/tools/sentinel`:
- `bin/sentinel` - runs a code complexity analysis to enforce good code readability practices.

## MR Workflow Algorithm

```
1. If provided with a project and mr OR a url pointing to an MR:
   a. discover the project path and MR ID, then run [start.sh](mdc:.cursor/tools/merge-review/start.sh) to initialize a review
   b. run [status.sh](mdc:.cursor/tools/merge-review/status.sh) to get an idea of what's ahead. 

2. While there are threads in the queue:
   a. Apply the "Thread Workflow Algorithm" below.
   d. Feel free to run [status.sh](mdc:.cursor/tools/merge-review/status.sh) again as needed to get an idea of how many threads are left.

3. Once ALL threads for a session have been addressed:
   a. make sure to [commit.sh](mdc:.cursor/tools/git/commit.sh) any remaining work
   b. [comment.sh](mdc:.cursor/tools/merge-review/comment.sh) on the MR (without a thread id, to make a comment on the MR itself):
      i. If the list of unresolved threads is greater than 0, add a Markdown link back to each one on this comment, where the text is a quick snippet of what's unresolved about that thread
      ii. state that you're ready for the next round of review.
  
   c. Run [finish.sh](mdc:.cursor/tools/merge-review/finish.sh) 
```

## Thread Workflow Algorithm
```
1. Run [peek-thread.sh](mdc:.cursor/tools/merge-review/peek-thread.sh) to get the next issue to address

2. If the last comment on the thread suggests we've already addressed the issue
  a. [resolve.sh](mdc:.cursor/tools/merge-review/resolve.sh) this thread
  b. [pop-thread.sh](mdc:.cursor/tools/merge-review/pop-thread.sh) off the session queue

3. If the thread from [peek-thread.sh](mdc:.cursor/tools/merge-review/peek-thread.sh) is a top-level MR comment just reporting progress on the MR:
  a. [comment.sh](mdc:.cursor/tools/merge-review/comment.sh) that you are picking back up for the next part of the review
  b. then [resolve.sh](mdc:.cursor/tools/merge-review/resolve.sh) the thread.

4. If the thread from [peek-thread.sh](mdc:.cursor/tools/merge-review/peek-thread.sh) is a top-level MR comment from a bot or service account and doesn't appear actionable:
  a. [comment.sh](mdc:.cursor/tools/merge-review/comment.sh) "Acknowledged."
  b. then [resolve.sh](mdc:.cursor/tools/merge-review/resolve.sh) the thread.

4. Otherwise:
  a. Address the thread as you see fit

  b. BEFORE [commit.sh](mdc:.cursor/tools/git/commit.sh)'ing your changes:
  - make sure that running the `sentinel` complexity checker tool passes.
  - make sure you've run the linter for the project (e.x., `yarn lint:fix`) and fix any linting issues
  - run applicable unit or integration tests (never cypress tests) and make sure you're passing
  - if no unit tests exist for the change, add them (either by adding a new unit test file if none exists, or by adding cases for what you've done)
  - all temporary files have been removed.

  c. [commit.sh](mdc:.cursor/tools/git/commit.sh) your changes and a detailed breakdown if there are code changes. The commit message should reference back to the project, MR, and thread being addressed ( @commit.sh should handle the link creation )

  d. If the thread hasn't been fully addressed or you have questions:
    - [comment.sh](mdc:.cursor/tools/merge-review/comment.sh) on the thread, mentioning what you've done and questions you have. Then, [pop-thread.sh](mdc:.cursor/tools/merge-review/pop-thread.sh) with the `--unresolved` flag and move on to the next thread
    - comments should be concise. If you've simply implemented the expected change without need for more context, just comment "Done" or "Updated" or "Fixed" (or something else short)
    - comments should be a reply to the thread, not our cursor conversation.

  e. If the thread has been fully addressed:
    i. [comment.sh](mdc:.cursor/tools/merge-review/comment.sh) on the thread with what you've done. Again, make sure the comment is a reply to the thread comments, not our cursor conversation.
    ii. [resolve.sh](mdc:.cursor/tools/merge-review/resolve.sh) the thread
    iii. [pop-thread.sh](mdc:.cursor/tools/merge-review/pop-thread.sh) off the review session queue
```

## Tool Details

### Session Management

**start.sh** creates a comprehensive session object containing:
- MR metadata (title, URL, branches, author, assignee)
- Thread queue (ordered list of discussion IDs)
- Thread context (full discussion details indexed by ID)
- Pipeline information
- Complete diff data for all changed files

**finish.sh** provides session summary and cleanup, removing all session files while preserving commit history.

### Thread Processing

**peek-thread.sh** displays the first thread in queue with:
- Human-readable timestamps (UTC converted to local timezone)
- Full comment chains including replies
- Diff context for code-related discussions
- File paths and line numbers for precise navigation

**pop-thread.sh** removes threads from the queue with options:
- Standard pop: marks thread as handled
- `--unresolved` flag: moves thread to unresolved list for later follow-up

**resolve.sh** marks threads as resolved in both local session and GitLab (when possible).

### Communication

**comment.sh** handles both thread replies and MR-level comments:
- Thread replies: responds to specific discussions
- `--new` flag: creates MR-level comments for general feedback

**status.sh** provides real-time overview:
- MR metadata and pipeline status
- Queue length and unresolved thread count
- Recent discussion summaries

## Usage Patterns

### Starting a Review
```bash
# Initialize from project directory
.cursor/tools/merge-review/start.sh gitlab-org/project 123

# Check what's ahead  
.cursor/tools/merge-review/status.sh gitlab-org/project 123
```

### Processing Threads
```bash
# View next thread
.cursor/tools/merge-review/peek-thread.sh gitlab-org/project 123

# Address the issue (make code changes, tests, etc.)

# Commit changes
.cursor/tools/git/commit.sh "Fix validation logic" "Addressed thread feedback" gitlab-org/project 123 thread-id

# Comment and resolve
.cursor/tools/merge-review/comment.sh gitlab-org/project 123 "Fixed validation as discussed"
.cursor/tools/merge-review/resolve.sh gitlab-org/project 123
.cursor/tools/merge-review/pop-thread.sh gitlab-org/project 123
```

### Handling Unresolved Issues
```bash
# Mark thread as needing follow-up
.cursor/tools/merge-review/comment.sh gitlab-org/project 123 "Will address in separate MR"
.cursor/tools/merge-review/pop-thread.sh gitlab-org/project 123 --unresolved
```

### Completing Review
```bash
# Final MR comment
.cursor/tools/merge-review/comment.sh gitlab-org/project 123 --new "Ready for next review round"

# Cleanup
.cursor/tools/merge-review/finish.sh gitlab-org/project 123
```

## Architecture Benefits

This approach provides several advantages over ad-hoc review processes:

1. **Systematic Coverage**: Queue ensures no threads are missed
2. **Rich Context**: Full diff and discussion history available offline
3. **Traceability**: Each change tied to specific thread via commit messages
4. **Efficiency**: Bulk data fetching minimizes API calls
5. **Flexibility**: Handles both immediate resolution and deferred follow-up

The toolset adapts to any GitLab-based project regardless of language or build system, requiring only basic Git and GitLab CLI access.
