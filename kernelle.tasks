{
  // ------------------------------------------------------------
  // High level tasks
  // ------------------------------------------------------------

  // Build the entire project
  build: "kernelle do rust:build:clean",

  // Clean the project  
  clean: "cargo clean",

  // Lint & Format the project
  lint: "kernelle do rust:lint",
  format: "kernelle do rust:format && kernelle do endlines:fix",
  tidy: "kernelle do lint && kernelle do format",

  // Security Audit
  audit: "kernelle do rust:audit",

  // Test the project
  test: "kernelle do rust:test",

  // Test without colors (for CI/CD)
  ,

  // Generate coverage reports
  coverage: "kernelle do rust:coverage",

  // Check code quality (never-nester principles)  
  quality: "kernelle do readability",

  // Fast CI pipeline (essential checks that can cause workflow failures)
  ci: "kernelle do ci:base && kernelle do test",

  // Thorough CI pipeline (complete local CI/CD simulation including coverage)
  "ci:all": "kernelle do ci:base && kernelle do coverage",

  // ------------------------------------------------------------
  // Build & Development tasks
  // ------------------------------------------------------------
  
  // Lint & Format (Fix)
  "rust:lint": "cargo clippy --workspace --all-targets --all-features --fix --allow-dirty --allow-staged",
  "rust:format": "cargo fmt --all",
  "endlines:fix": "bash scripts/ensure-final-newlines.sh --fix",

  // Lint & Format (Assert)
  "rust:lint:assert": "RUSTFLAGS=\"-D warnings\" cargo clippy --workspace --all-targets --all-features",
  "rust:format:assert": "cargo fmt --all -- --check",
  "endlines:check": "bash scripts/ensure-final-newlines.sh --check",

  // Build and/or clean the Rust code
  "rust:build": "cargo build --release",
  "rust:clean": "cargo clean",
  "rust:build:clean": "kernelle do rust:clean && kernelle do rust:build",

  // Security Audit
  "rust:audit": "cargo audit --deny warnings --deny unmaintained",

  // Testing
  "rust:test": "cargo test --workspace",
  "rust:coverage": "cargo tarpaulin --workspace --timeout 300 --out xml --output-dir coverage",

  // CI/CD Tasks
  "ci:tidy": "kernelle do rust:lint:assert && kernelle do rust:format:assert && kernelle do endlines:check",
  "ci:build": "kernelle do build", 
  "ci:secure": "kernelle do rust:audit",
  "ci:test": "NO_COLOR=1 kernelle do rust:test",

  // Base CI/CD Task to be used in top level checks.
  "ci:base": "kernelle do ci:tidy && kernelle do ci:build && kernelle do quality && kernelle do ci:secure",

  // ------------------------------------------------------------
  // Testing
  // ------------------------------------------------------------
  "test:full-suite": "bacon test",
  "test:full-suite:coverage": "cargo tarpaulin --workspace --timeout 300 --out xml --output-dir coverage",

  // ------------------------------------------------------------
  // Code Quality tasks
  // ------------------------------------------------------------
  "quality:all": "kernelle do readability && kernelle do linting:assert && kernelle do formatting:assert",

  readability: "violet .",
  "linting:assert": "cargo clippy --workspace -- -D warnings",
  "formatting:assert": "cargo fmt --all -- --check",

  // ------------------------------------------------------------
  // Global Installation workflows
  // ------------------------------------------------------------  
  install: "scripts/install.sh",

  uninstall: "scripts/cleanup.sh",
}
